import sys

def Z(RecSize, R, C):
    if RecSize == 1:
        return 0
    
    RecSize = RecSize // 2

    for i in range(2):
        for j in range(2):
            if R < RecSize * (i + 1) and C < RecSize * (j + 1):
                return (2 * i + j) * (RecSize**2) + Z(RecSize, R - i * RecSize, C - j * RecSize)

N, R, C = map(int, sys.stdin.readline().split())

print(Z(2**N, R, C))

# 이 문제는 배열을 직접 만들어서 완전 탐색하는 방법을 사용하면 시간 초과가 나온다.
# 따라서, 직사각형을 1, 2, 3, 4분면으로 분할하고, 
# 찾고자 하는 행, 열 값이 위치하는 사분면을 찾고, 
# 또 직사각형 한 변의 길이가 1이 될 때까지 1, 2, 3, 4분면으로 분할하여 값을 찾는 방식으로 풀어야 함

# 크기, 찾고자하는 값의 행, 찾고자하는 값의 열인 N, R, C 입력
# 입력받은 N값을 이용하여 전체 직사각형 한 변의 길이를 계산한 값, 행과 열 값을 Z함수에 전달
# Z함수에서 만약 전체 직사각형 한 변의 길이가 1이면, 값이 1개만 들어가 있기 때문에 0 리턴
# 전체 직사각형 사이즈를 2로 나눈 몫을 4개의 직사각형 한 변의 길이로 설정
# 1, 2, 3, 4분면 즉 4개의 직사각형이기 때문에 이중 for문 수행
# 각 분면의 마지막 값의 행과 열의 값에 포함되는지 확인하여 몇 분면에 위치한지 확인
# 몇 분면에 위치한지 확인한 후, 해당 분면의 첫 번째 값 + Z함수 반복을 수행
# 직사각형은 2X2 크기의 작사각형까지 분할될 것이고, 
# 분면마다 찾아진 리턴 값들을 모두 더하면 찾고자하는 행과 열 값의 순서가 몇 번인지 찾을 수 있음

# 참고 사이트 : https://polarcompass.tistory.com/27